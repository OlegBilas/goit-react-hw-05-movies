{"version":3,"file":"static/js/355.7f10e063.chunk.js","mappings":"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","sources":["API/API.js","webpack://goit-react-hw-05-movies/./src/components/MovieReviews/MovieReviews.module.css?a938","components/MovieReviews/MovieReviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '7cac8f2b707803c3d0e6d2661b894935';\nconst URL = 'https://api.themoviedb.org/3';\nconst imgURL = 'https://image.tmdb.org/t/p/w500';\nconst smallImgURL = 'https://image.tmdb.org/t/p/w200';\n\n// Request fims in trending or by key-word\nconst fetchFilms = async (filmName, page = 1) => {\n  const request = filmName\n    ? `${URL}/search/movie?api_key=${KEY}&language=en-US&query=${filmName}&page=${page}`\n    : `${URL}/trending/all/day?api_key=${KEY}&page=${page}`;\n\n  \n    const response = await axios.get(request);\n    const takeInfo = results => {\n      return results\n        .filter(\n          ({ poster_path, genre_ids, title, original_title }) =>\n            //фільтрація на заповненість даними\n            poster_path && genre_ids && (title || original_title)\n        )\n        .map(({ id, title, original_title }) => ({\n          id,\n          title: title ? title : original_title,\n        }));\n    };\n   \n    return takeInfo(response.data.results);\n};\n\n// Request by film's ID (сommon information about film)\nconst fetchFilmById = async filmId => {\n    const response = await axios.get(\n      `${URL}/movie/${filmId}?api_key=${KEY}&language=en-US`\n    );\n    const {\n      genres,\n      id,\n      poster_path,\n      release_date = '',\n      title,\n      vote_average,\n      overview,\n    } = response.data;\n\n    return {\n      id,\n      poster_path: `${imgURL}${poster_path}`,\n      title: `${title} (${release_date.slice(0, 4)})`,\n      userScore: `${Math.round(vote_average * 10)}%`,\n      overview,\n      genres: genres.map(genre => genre.name).join(' '),\n    };\n\n};\n\n// Request about casting\nconst fetchCastFilmById = async filmId => {\n  \n    const response = await axios.get(\n      `${URL}/movie/${filmId}/credits?api_key=${KEY}&language=en-US`\n    );\n    const { cast } = response.data;\n\n    return cast.map(({ id, name, profile_path, character }) => ({\n      id,\n      name,\n      character,\n      photo: profile_path?`${smallImgURL}${profile_path}`:null,\n    }));\n  \n};\n\n// // Request about reviews\nconst fetchReviewsFilmById = async (filmId, page = 1) => {\n  \n    const response = await axios.get(\n      `${URL}/movie/${filmId}/reviews?api_key=${KEY}&language=en-US&page=${page}`\n    );\n    const { results } = response.data;\n\n    return results.map(({ id, author, content }) => ({ id, author, content }));\n  \n};\n\nexport { fetchFilms, fetchFilmById, fetchCastFilmById, fetchReviewsFilmById };\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"MovieReviews_text__Z+nWE\"};","import React from 'react';\nimport { fetchReviewsFilmById } from '../../API/API';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './MovieReviews.module.css';\n\nfunction MovieReviews() {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchReviewsFilmById(movieId).then(result => setReviews(result));\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <p>Author: {author}</p>\n            <p className={css.text}>{content}</p>\n          </li>\n        ))}\n      </ul>\n      {reviews.length === 0 && <p>We don't have any reviews for this movie</p>}\n    </>\n  );\n}\n\nexport default MovieReviews;\n"],"names":["KEY","URL","fetchFilms","filmName","page","request","axios","response","takeInfo","results","filter","poster_path","genre_ids","title","original_title","map","id","data","fetchFilmById","filmId","genres","release_date","vote_average","overview","slice","userScore","Math","round","genre","name","join","fetchCastFilmById","cast","profile_path","character","photo","fetchReviewsFilmById","author","content","useState","reviews","setReviews","movieId","useParams","useEffect","then","result","className","css","length"],"sourceRoot":""}